{
  "name": "Squirrel",
  "scopeName": "source.squirrel",
  "patterns": [
    { "include": "#all" }
  ],
  "repository": {
    "all": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#class" },
        { "include": "#enum" },
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "global": {
      "patterns": [
        { "include": "#comments" }
      ]
    },

    "block": {
      "begin": "\\{",
      "beginCaptures": { "0": { "name": "punctuation.definition.block.begin.squirrel" } },
      "end": "\\}",
      "endCaptures": { "0": { "name": "punctuation.definition.block.end.squirrel" } },
      "patterns": [
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "block-contents": {
      "patterns": [
        { "include": "#global" },
        { "include": "#array" },
        { "include": "#constants" },
        { "include": "#strings" },
        { "include": "#method" },
        { "include": "#variable" },
        { "include": "#modifiers" },
        { "include": "#for-loop" },
        { "include": "#keywords" },
        { "include": "#method-call" },
        { "include": "#lambda-expression" },
        { "include": "#punctuation-braces" },
        { "include": "#operators" },
        { "include": "#operator-assignment" },
        { "include": "#punctuation-terminator" },
        { "include": "#punctuation-comma" },
        { "include": "#punctuation-accessor" },
        { "include": "#identifiers" }
      ]
    },

    "identifiers": {
      "patterns": [
        { "include": "#constant-name" },
        { "include": "#identifier-name" }
      ]
    },

    "class": {
      "begin": "(?=class)",
      "end": "(?<=\\})|(;)",
      "endCaptures": { "1": { "name": "punctuation.terminator.squirrel" } },
      "name": "meta.class.squirrel",
      "patterns": [
        { "include": "#class-name" },
        { "include": "#class-name-post" },
        { "include": "#class-block" }
      ]
    },

    "class-name": {
      "begin": "\\b(class)\\b",
      "beginCaptures": { "1": { "name": "storage.type.class.squirrel" } },
      "end": "([_A-Za-z][\\w\\.]*)",
      "endCaptures": { "1": { "name": "entity.name.type.class.squirrel" } },
      "name": "meta.class.identifier.squirrel",
      "patterns": [
        { "include": "#global" }
      ]
    },

    "class-name-post": {
      "begin": "(?<=\\w)",
      "end": "(\\{)",
      "endCaptures": { "1": { "name": "punctuation.definition.block.begin.squirrel" } },
      "patterns": [
        { "include": "#modifiers-inheritance" },
        {
          "match": "\\b([_A-Za-z][\\w\\.]*)\\b",
          "name": "entity.name.type.class.squirrel"
        }
      ]
    },

    "class-block": {
      "begin": "(?<=\\{)",
      "end": "(\\})",
      "endCaptures": { "1": { "name": "punctuation.definition.block.end.squirrel" } },
      "name": "meta.block.squirrel",
      "patterns": [
        { "include": "#method" },
        { "include": "#modifiers" },
        { "include": "#variable" },
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "enum": {
      "begin": "(?=enum)",
      "end": "(?<=\\})|(;)",
      "endCaptures": { "1": { "name": "punctuation.terminator.squirrel" } },
      "name": "meta.enum.squirrel",
      "patterns": [
        { "include": "#enum-name" },
        { "include": "#enum-name-post" },
        { "include": "#enum-block" }
      ]
    },

    "enum-name": {
      "begin": "\\b(enum)\\b",
      "beginCaptures": { "1": { "name": "storage.type.class.squirrel" } },
      "end": "([_A-Za-z][\\w]*)",
      "endCaptures": { "1": { "name": "entity.name.type.class.squirrel" } },
      "patterns": [
        { "include": "#global" }
      ]
    },

    "enum-block": {
      "begin": "(?<=\\{)",
      "end": "(\\})",
      "endCaptures": { "1": { "name": "punctuation.definition.block.end.squirrel" } },
      "name": "meta.block.squirrel",
      "patterns": [
        { "include": "#global" },
        { "include": "#parameters" },
        { "include": "#identifiers" }
      ]
    },

    "lambda-expression": {
      "patterns": [
        {
          "match": "@()",
          "name": "storage.type.function.lambda.squirrel"
        }
      ]
    },

    "array": {
      "begin": "\\[",
      "beginCaptures": { "0": { "name": "punctuation.definition.array.begin.squirrel" } },
      "end": "\\]",
      "endCaptures": { "0": { "name": "punctuation.definition.array.end.squirrel" } },
      "name": "meta.array.literal.squirrel",
      "patterns": [
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "constants": {
      "patterns": [
        {
          "match": "\\btrue\\b",
          "name": "constant.language.boolean.true.squirrel"
        },
        {
          "match": "\\bfalse\\b",
          "name": "constant.language.boolean.false.squirrel"
        },
        {
          "match": "\\bnull\\b",
          "name": "constant.language.null.squirrel"
        },
        {
          "match": "\\b[-]?[0-9]+(\\.)[0-9]+(?:[eE][+-]?[0-9]+)?\\b",
          "captures": {
            "0": { "name": "constant.numeric.float.squirrel" },
            "1": { "name": "meta.delimiter.decimal.period.squirrel" }
          }
        },
        {
          "match": "\\b0[0-7]+\\b",
          "name": "constant.numeric.integer.octal.squirrel"
        },
        {
          "match": "\\b0[0-9]+\\b",
          "name": "invalid.illegal.integer.octal.squirrel"
        },
        {
          "match": "\\b(0|[1-9][0-9]*)\\b",
          "name": "constant.numeric.integer.decimal.squirrel"
        },
        {
          "match": "\\b0(x|X)[\\h]+\\b",
          "name": "constant.numeric.integer.hexadecimal.squirrel"
        },
        {
          "match": "\\b0(x|X)[\\w]*\\b",
          "name": "invalid.illegal.integer.hexadecimal.squirrel"
        },
        {
          "match": "(\\')(?:[^'\\\\]|(\\\\.|\\\\x[\\h]{2}))(\\')",
          "name": "constant.numeric.integer.other.squirrel",
          "captures": {
            "1": { "name": "punctuation.definition.string.begin.squirrel" },
            "2": {
              "patterns": [
                { "include": "#string-escape-sequences" }
              ]
            },
            "3": { "name": "punctuation.definition.string.end.squirrel" }
          }
        },
        {
          "match": "\\'.{2,}\\'",
          "name": "invalid.illegal.integer.other.squirrel"
        }
      ]
    },

    "comments": {
      "patterns": [
        {
          "begin": "(#).*",
          "beginCaptures": { "1": { "name": "punctuation.definition.comment.squirrel" } },
          "end": "(?=$)",
          "name": "comment.line.number-sign.squirrel"
        },
        {
          "begin": "(\\/\\/).*",
          "beginCaptures": { "1": { "name": "punctuation.definition.comment.squirrel" } },
          "end": "(?=$)",
          "name": "comment.line.double-slash.squirrel"
        },
        {
          "begin": "/\\*(?!/)",
          "beginCaptures": { "1": { "name": "punctuation.definition.comment.squirrel" } },
          "end": "\\*/",
          "endCaptures": { "1": { "name": "punctuation.definition.comment.squirrel" } },
          "name": "comment.block.squirrel"
        }
      ]
    },

    "strings": {
      "patterns": [
        {
          "begin": "@\\\"",
          "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.squirrel" } },
          "end": "\\\"",
          "endCaptures": { "0": { "name": "punctuation.definition.string.end.squirrel" } },
          "name": "string.quoted.double.squirrel",
          "patterns": [
            { "include": "#string-escape-sequences" }
          ]
        },
        {
          "begin": "(\\$\\\")",
          "beginCaptures": {
            "0": { "name": "string.quoted.double.squirrel" },
            "1": { "name": "punctuation.definition.string.begin.squirrel" } },
          "end": "(\\\")",
          "endCaptures": {
            "0": { "name": "string.quoted.double.squirrel" },
            "1": { "name": "punctuation.definition.string.end.squirrel" }
          },
          "patterns": [
            { "include": "#block" },
            { "include": "#string-escape-sequences" },
            {
              "match" : "[^\\\"\\{\\}]*",
              "name": "string.quoted.double.squirrel"
            }
          ]
        },
        {
          "match": "(\\\")((?:[^\"\\\\]|\\\\.)*)(\\\")",
          "name": "string.quoted.double.squirrel",
          "captures": {
            "1": { "name": "punctuation.definition.string.begin.squirrel" },
            "2": {
              "patterns": [
                { "include": "#string-escape-sequences" }
              ]
            },
            "3": { "name": "punctuation.definition.string.end.squirrel" }
          }
        }
      ]
    },

    "string-escape-sequences": {
      "patterns": [
        {
          "match": "\\\\x[\\h]{2}",
          "name": "constant.character.escape.squirrel"
        },
        {
          "match": "\\\\u[\\h]{4}",
          "name": "constant.character.escape.squirrel"
        },
        {
          "match": "\\\\U[\\h]{8}",
          "name": "constant.character.escape.squirrel"
        },
        {
          "match": "\\\\[0tabnrvf\\\"\\'\\\\]",
          "name": "constant.character.escape.squirrel"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.escape.squirrel"
        }
      ]
    },

    "method": {
      "begin": "(?=\\bfunction\\b)",
      "end": "(?<=[\\}])",
      "name": "meta.method.squirrel",
      "patterns": [
        { "include": "#method-name" },
        { "include": "#method-name-post" },
        { "include": "#method-block" }
      ]
    },

    "method-name": {
      "begin": "\\b(function)\\b\\s*\\b(?:(constructor)|([_A-Za-z][\\w]*))?\\b",
      "beginCaptures": {
        "1": { "name": "storage.type.function.squirrel" },
        "2": { "name": "storage.type.squirrel" },
        "3": { "name": "entity.name.function.squirrel" }
      },
      "end": "(?=$|\\()"
    },

    "method-name-post": {
      "begin": "(?<=[\\w\\s])",
      "end": "(\\{)",
      "endCaptures": { "1": { "name": "punctuation.definition.block.begin.squirrel" } },
      "patterns": [
        { "include": "#parameters" },
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "method-block": {
      "begin": "(?<=\\{)",
      "beginCaptures": { "1": { "name": "punctuation.definition.block.begin.squirrel" } },
      "end": "(\\})",
      "endCaptures": { "1": { "name": "punctuation.definition.block.end.squirrel" } },
      "name": "meta.method.block.squirrel",
      "patterns": [
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "parameters": {
      "begin": "\\(",
      "beginCaptures": { "0": { "name": "punctuation.definition.parameters.begin.squirrel" } },
      "end": "\\s*(\\))",
      "endCaptures": { "1": { "name": "punctuation.definition.parameters.end.squirrel" } },
      "name": "meta.parameters.squirrel",
      "patterns": [
        { "include": "#parameter" }
      ]
    },

    "parameter": {
      "begin": "(?<=\\(|,)",
      "end": "(?=\\)|,)",
      "patterns": [
        { "include": "#parameter-name" },
        { "include": "#parameter-assign" },
        { "include": "#punctuation-comma" },
        { "include": "#global" }
      ]
    },

    "parameter-name": {
      "begin": "(?<=\\(|,)",
      "end": "([_a-zA-Z][\\w]*)",
      "endCaptures": { "1": { "name": "variable.parameter.squirrel" } },
      "patterns": [
        { "include": "#global" },
        { "include": "#metadata" },
        { "include": "#operator-optional" }
      ]
    },

    "parameter-assign": {
      "begin": "=",
      "beginCaptures": { "0": { "name": "keyword.operator.assignment.squirrel" } },
      "end": "(?=\\)|,)",
      "patterns": [
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "operator-optional": {
      "match": "(\\?)(?!\\s)",
      "name": "keyword.operator.optional.squirrel"
    },

    "variable": {
      "begin": "(?=\\b(local|global)\\b)",
      "end": "(?=$)|(;)",
      "endCaptures": { "1": { "name": "punctuation.terminator.squirrel" } },
      "patterns": [
        { "include": "#variable-name" },
        { "include": "#variable-name-next" },
        { "include": "#variable-assign" },
        { "include": "#variable-name-post" }
      ]
    },

    "variable-name": {
      "begin": "\\b(local|global)\\b",
      "beginCaptures": { "1": { "name": "storage.type.variable.squirrel" } },
      "end": "(?=$)|([_a-zA-Z][\\w]*)",
      "endCaptures": { "1": { "name": "variable.other.squirrel" } },
      "patterns": [
        { "include": "#operator-optional" }
      ]
    },

    "variable-name-next": {
      "begin": ",",
      "beginCaptures": { "0": { "name": "punctuation.separator.comma.squirrel" } },
      "end": "([_a-zA-Z][\\w]*)",
      "endCaptures": { "1": { "name": "variable.other.squirrel" } },
      "patterns": [
        { "include": "#global" }
      ]
    },

    "variable-assign": {
      "begin": "=",
      "beginCaptures": { "0": { "name": "keyword.operator.assignment.squirrel" } },
      "end": "(?=;|,)",
      "patterns": [
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "variable-name-post": {
      "begin": "(?<=\\w)",
      "end": "(?=;)|(?==)",
      "patterns": [
        { "include": "#variable-accessors" },
        { "include": "#block-contents" }
      ]
    },

    "modifiers": {
      "patterns": [
        {
          "match": "\\b(enum|class)\\b",
          "name": "storage.type.class.squirrel"
        },
        {
          "match": "\\b(local|global|static|const)\\b",
          "name": "storage.modifier.squirrel"
        },
        {
          "match": "^\\s*(::)",
          "name": "storage.modifier.global"
        }
      ]
    },

    "for-loop": {
      "patterns": [
        {
          "begin": "\\b(for)\\b[\\s]*(\\()",
          "beginCaptures": {
            "1": { "name": "keyword.control.flow-control.squirrel" },
            "2": { "name": "meta.brace.round.squirrel" }
          },
          "end": "(\\))",
          "endCaptures": { "1": { "name": "meta.brace.round.squirrel" } },
          "patterns": [
            { "include": "#block" },
            { "include": "#block-contents" }
          ]
        },
        {
          "begin": "\\b(foreach)\\b[\\s]*(\\()",
          "beginCaptures": {
            "1": { "name": "keyword.control.flow-control.squirrel" },
            "2": { "name": "meta.brace.round.squirrel" }
          },
          "end": "(\\))",
          "endCaptures": { "1": { "name": "meta.brace.round.squirrel" } },
          "patterns": [
            {
              "match": "\\b(in)\\b",
              "name": "keyword.other.in.squirrel"
            },
            { "include": "#block" },
            { "include": "#block-contents" }
          ]
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "begin": "(?<=if|while|for|foreach|)\\s*(\\()",
          "beginCaptures": { "2": { "name": "meta.brace.round.squirrel" } },
          "end": "\\)",
          "endCaptures": { "0": { "name": "meta.brace.round.squirrel" } },
          "patterns": [
            { "include": "#block-contents" }
          ]
        },
        {
          "begin": "(?<=catch)\\s*(\\()",
          "beginCaptures": { "2": { "name": "meta.brace.round.squirrel" } },
          "end": "\\)",
          "endCaptures": { "0": { "name": "meta.brace.round.squirrel" } },
          "patterns": [
            { "include": "#block-contents" }
          ]
        },
        {
          "match": "\\b(try|catch|throw)\\b",
          "name": "keyword.control.catch-exception.squirrel"
        },
        {
          "begin": "\\b(case|default)\\b",
          "beginCaptures": { "1": { "name": "keyword.control.flow-control.squirrel" } },
          "end": ":|$",
          "patterns": [
            { "include": "#global" },
            { "include": "#metadata" },
            { "include": "#array" },
            { "include": "#constants" },
            { "include": "#strings" },
            {
              "match": "\\(",
              "name": "meta.brace.round.squirrel"
            },
            {
              "match": "\\)",
              "name": "meta.brace.round.squirrel"
            },
            { "include": "#operator-assignment" },
            { "include": "#punctuation-comma" },
            { "include": "#keywords" },
            { "include": "#method-call" },
            { "include": "#identifiers" }
          ]
        },
        {
          "match": "\\b(if|else|while|do|switch|case|break|for|foreach|return|yield|continue|resume|default)\\b",
          "name": "keyword.control.flow-control.squirrel"
        },
        {
          "match": "\\b(base|this)\\b",
          "name": "variable.language.squirrel"
        },
        {
          "match": "\\bconstructor\\b",
          "name": "keyword.operator.new.squirrel"
        },
        {
          "match": "\\b(class|enum)\\b",
          "name": "storage.type.variable.squirrel"
        },
        {
          "match": "\\b(delete|clone)\\b",
          "name": "keyword.operator.assignment.squirrel"
        },
        {
          "match": "\\b(in|not\\s+in|instanceof|typeof)\\b",
          "name": "keyword.operator.logical.squirrel"
        },
        {
          "match": "\\b(__LINE__|__FILE__)\\b",
          "name": "keyword.other.squirrel"
        },
        { "include": "#modifiers" },
        { "include": "#modifiers-inheritance" }
      ]
    },

    "punctuation-braces": {
      "begin": "\\(",
      "beginCaptures": { "0": { "name": "meta.brace.round.squirrel" } },
      "end": "\\)",
      "endCaptures": { "0": { "name": "meta.brace.round.squirrel" } },
      "patterns": [
        { "include": "#keywords" },
        {
          "match": "\\bis\\b(?!\\()",
          "name": "keyword.other.squirrel"
        },
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "modifiers-inheritance": {
      "match": "\\b(extends)\\b",
      "name": "storage.modifier.squirrel"
    },

    "method-call": {
      "begin": "\\b([_A-Za-z][\\w]*)\\s*(\\()",
      "beginCaptures": {
        "1": { "name": "entity.name.function.squirrel" },
        "2": { "name": "meta.brace.round.squirrel" }
      },
      "end": "(\\))",
      "endCaptures": { "1": { "name": "meta.brace.round.squirrel" } },
      "patterns": [
        { "include": "#block" },
        { "include": "#block-contents" }
      ]
    },

    "operator-assignment": {
      "match": "(=)",
      "name": "keyword.operator.assignment.squirrel"
    },

    "operators": {
      "patterns": [
        {
          "match": "(&&|\\|\\|)",
          "name": "keyword.operator.logical.squirrel"
        },
        {
          "match": "(~|&|\\||\\^|>>>|<<|>>)",
          "name": "keyword.operator.bitwise.squirrel"
        },
        {
          "match": "(==|!=|<=|>=|<=>|<|>)",
          "name": "keyword.operator.comparison.squirrel"
        },
        {
          "match": "(!)",
          "name": "keyword.operator.logical.squirrel"
        },
        {
          "match": "(\\-\\-|\\+\\+)",
          "name": "keyword.operator.increment-decrement.squirrel"
        },
        {
          "match": "(\\-|\\+|\\*|\\/|%)",
          "name": "keyword.operator.arithmetic.squirrel"
        },
        {
          "match": "(\\+=|\\-=|\\*=|/=|%=)",
          "name": "keyword.operator.assignment.squirrel"
        },
        {
          "match": "\\?\\?",
          "name": "keyword.operator.null-operator.squirrel"
        },
        {
          "begin": "\\?",
          "beginCaptures": { "0": { "name": "keyword.operator.ternary.squirrel" } },
          "end": ":",
          "endCaptures": { "0": { "name": "keyword.operator.ternary.squirrel" } },
          "patterns": [
            { "include": "#block-contents" }
          ]
        }
      ]
    },

    "punctuation-comma": {
      "match": ",",
      "name": "punctuation.separator.comma.squirrel"
    },

    "punctuation-accessor": {
      "match": "(\\.|<-)",
      "name": "punctuation.accessor.squirrel"
    },

    "punctuation-terminator": {
      "match": ";",
      "name": "punctuation.terminator.squirrel"
    },

    "constant-name": {
      "match": "\\b([_A-Z][_A-Z0-9]*)\\b",
      "name": "variable.other.squirrel"
    },

    "identifier-name": {
      "match": "\\b([_A-Za-z][\\w]*)\\b",
      "name": "variable.other.squirrel"
    }
  }
}